openapi: 3.0.0
info:
  title: Job Description Processing API
  description: API for processing and extracting job descriptions from uploaded files
  version: 1.0.0
  contact:
    name: API Support
    email: support@recruitgenius.com

servers:
  - url: http://localhost:8000/api/v1
    description: Development server

paths:
  /job-description/process:
    post:
      summary: Process job description file
      description: Upload and process a job description file (PDF, DOC, DOCX) to extract formatted text
      tags:
        - Job Description
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Job description file to process (PDF, DOC, DOCX)
              required:
                - file
      responses:
        '200':
          description: File processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescriptionResponse'
        '400':
          description: Bad request - Invalid file type or missing file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /job-description/generate:
    post:
      summary: Generate job description with AI
      description: Generate a comprehensive job description using AI based on provided parameters
      tags:
        - Job Description
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobDescriptionGenerateRequest'
      responses:
        '200':
          description: Job description generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescriptionResponse'
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /match-and-score:
    post:
      summary: Match and score candidates
      description: Analyze resumes against job description and provide detailed candidate matching with scores
      tags:
        - Matching & Scoring
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                job_description:
                  type: string
                  description: The job description text to match against
                resumes:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Resume files to analyze (PDF, DOC, DOCX)
              required:
                - job_description
                - resumes
      responses:
        '200':
          description: Candidates analyzed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchAndScoreResponse'
        '400':
          description: Bad request - Invalid parameters or files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    JobDescriptionResponse:
      type: object
      properties:
        formatted_text:
          type: string
          description: The extracted and formatted job description text
          example: |
            **Job Title:** Senior Python Developer
            
            **Company:** Tech Corp
            
            **Department:** Engineering
            
            **Job Summary:**
            Tech Corp is seeking a highly motivated and experienced Senior Python Developer to join our dynamic engineering team...
        processing_time:
          type: number
          format: float
          description: Time taken to process the file in seconds
          example: 5.23
      required:
        - formatted_text
        - processing_time

    JobDescriptionGenerateRequest:
      type: object
      properties:
        job_title:
          type: string
          description: The job title for the position
          example: "Senior Python Developer"
        experience:
          type: string
          description: Required experience level
          example: "3-5 years"
        company:
          type: string
          description: Company name
          example: "Tech Corp"
        job_type:
          type: string
          description: Type of employment
          example: "Full-time"
        must_have_skills:
          type: string
          description: Required skills for the position
          example: "Python, FastAPI, React, TypeScript, Node.js"
        industry:
          type: string
          description: Industry sector
          example: "Technology"
        location:
          type: string
          description: Job location
          example: "San Francisco, CA"
      required:
        - job_title
        - experience
        - company
        - job_type
        - must_have_skills
        - industry
        - location

    MatchAndScoreResponse:
      type: object
      properties:
        job_description:
          type: string
          description: The job description used for matching
        candidates_data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CandidateData'
          description: Detailed data for each candidate
        analytics:
          $ref: '#/components/schemas/Analytics'
      required:
        - job_description
        - candidates_data
        - analytics

    CandidateData:
      type: object
      properties:
        candidate_name:
          type: string
          description: Name of the candidate
          example: "John Doe"
        resume_name:
          type: string
          description: Name of the resume file
          example: "john_doe_resume.pdf"
        missing_skills:
          type: array
          items:
            type: string
          description: Skills that the candidate is missing
          example: ["React Native", "GraphQL"]
        pros:
          type: array
          items:
            type: string
          description: Positive aspects of the candidate
          example: ["Strong technical background", "Excellent problem-solving skills"]
        cons:
          type: array
          items:
            type: string
          description: Areas where the candidate needs improvement
          example: ["Limited leadership experience", "Missing advanced skills"]
      required:
        - candidate_name
        - resume_name
        - missing_skills
        - pros
        - cons

    Analytics:
      type: object
      properties:
        candidates_analyzed:
          type: integer
          description: Number of candidates analyzed
          example: 2
        average_match_score:
          type: number
          description: Average match score across all candidates
          example: 57
        top_match_score:
          type: number
          description: Highest match score achieved
          example: 70
        best_candidate:
          type: string
          description: Name of the best matching candidate
          example: "Mihir Savjani"
        best_candidate_reason:
          type: string
          description: Reason why this candidate is the best match
        candidate_rankings:
          type: array
          items:
            $ref: '#/components/schemas/CandidateRanking'
          description: Ranked list of candidates
      required:
        - candidates_analyzed
        - average_match_score
        - top_match_score
        - best_candidate
        - best_candidate_reason
        - candidate_rankings

    CandidateRanking:
      type: object
      properties:
        candidate_uuid:
          type: string
          description: Unique identifier for the candidate
          example: "b94f137c-60bd-4f1e-884c-ba86aca07b4b"
        candidate_name:
          type: string
          description: Name of the candidate
          example: "Mihir Savjani"
        match_score:
          type: number
          description: Match score for this candidate
          example: 70
        rank:
          type: integer
          description: Ranking position (1 being the best)
          example: 1
        summary:
          type: string
          description: Brief summary of the candidate's match
      required:
        - candidate_uuid
        - candidate_name
        - match_score
        - rank
        - summary
    
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "Invalid file type. Please upload PDF, DOC, or DOCX files only."
        status:
          type: integer
          description: HTTP status code
          example: 400
      required:
        - message

tags:
  - name: Job Description
    description: Operations related to job description processing and generation
  - name: Matching & Scoring
    description: Operations related to candidate matching and scoring analysis 